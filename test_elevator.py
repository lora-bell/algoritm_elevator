import builtins

import pytest

import elevator


@pytest.mark.parametrize("input_values, expected",
                         [(["2", "3", "3", "0", "1"], "8"),
                          (["5", "1", "71"], "30"),
                          (['3', '100', '0', '2', '2', '0', '0', '0', '2', '2', '0', '2', '0', '0', '1', '0', '0', '2', '0', '0', '2', '2', '0', '0', '2', '1', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '2', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '2', '0', '0', '0', '2', '0', '0', '0', '2', '0', '1', '0', '1', '0', '2', '2', '1', '2', '0', '0', '0', '0', '2', '0', '0', '0', '2', '0', '2', '0', '2', '0', '2', '0', '1', '0', '0', '2', '0', '2', '1', '2', '0', '1', '0'], "2286"),
                          (['4695', '100', '89', '21', '63', '61', '75', '28', '89', '86', '60', '39', '81', '3', '85', '60', '89', '86', '85', '51', '60', '15', '56', '24', '90', '6', '4', '53', '34', '35', '22', '88', '17', '8', '45', '6', '28', '85', '35', '60', '8', '82', '72', '29', '26', '78', '52', '98', '78', '25', '43', '81', '35', '94', '23', '3', '50', '2', '46', '51', '82', '95', '86', '47', '13', '18', '4', '77', '52', '66', '49', '13', '9', '64', '32', '70', '50', '53', '74', '0', '8', '4', '28', '41', '88', '99', '40', '64', '74', '97', '84', '60', '6', '21', '48', '7', '37', '6', '31', '0', '0', '0'], "194"),
                          (['50', '100', '52', '59', '45', '7', '6', '56', '55', '7', '60', '10', '51', '59', '97', '56', '49', '6', '43', '7', '45', '9', '54', '43', '7', '46', '9', '8', '41', '50', '41', '43', '47', '51', '7', '54', '9', '7', '1', '48', '59', '60', '2', '9', '43', '47', '58', '52', '57', '47', '54', '57', '50', '47', '3', '51', '44', '48', '3', '60', '6', '58', '58', '47', '52', '7', '3', '90', '4', '46', '53', '57', '8', '3', '59', '59', '47', '7', '1', '41', '52', '9', '55', '6', '43', '3', '42', '52', '49', '49', '3', '39', '0', '50', '48', '6', '4', '46', '50', '9', '59', '60'], "7278")])
def test_elevator(capsys, monkeypatch, input_values, expected):
    info = iter(input_values)
    monkeypatch.setattr(builtins, "input", lambda: next(info))
    elevator.time_elevator()
    answer = capsys.readouterr().out.strip()
    assert answer == expected
